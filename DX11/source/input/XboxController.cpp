///////////////////////////////////////////////////////////////////////////
//	File Name	:	"XboxController.cpp"
//	
//	Author Name	:	JC Ricks
//	
//	Purpose		:	Encapsulate a single xbox controller's input
///////////////////////////////////////////////////////////////////////////

////////////////////////////////////////
//				INCLUDES
////////////////////////////////////////
#include "XboxController.h"

////////////////////////////////////////
//				MISC
////////////////////////////////////////

///////////////////////////////////////////////
//  CONSTRUCTOR / DECONSTRUCT / OP OVERLOADS
///////////////////////////////////////////////
XboxController::XboxController(int controllerNumber) : m_controllerNumber(controllerNumber)
{	
}

XboxController::~XboxController()
{
}

////////////////////////////////////////
//		PUBLIC UTILITY FUNCTIONS
////////////////////////////////////////
int XboxController::GetState(XINPUT_STATE& state)
{
	int result = 0;
	SecureZeroMemory(&m_state,sizeof(XINPUT_STATE));
	result = XInputGetState(m_controllerNumber,&m_state);
	state = m_state;
	return result;
}

void XboxController::Vibrate(int leftVal, int rightVal)
{
	XINPUT_VIBRATION vibration;
	SecureZeroMemory(&vibration,sizeof(XINPUT_VIBRATION));
	vibration.wLeftMotorSpeed = leftVal;
	vibration.wRightMotorSpeed = rightVal;
	XInputSetState(m_controllerNumber,&vibration);
}

////////////////////////////////////////
//		PRIVATE UTILITY FUNCTIONS
////////////////////////////////////////

////////////////////////////////////////
//	    PUBLIC ACCESSORS / MUTATORS
////////////////////////////////////////
int XboxController::GetControllerNumber()
{
	return m_controllerNumber;
}

////////////////////////////////////////
//	    PRIVATE ACCESSORS / MUTATORS
////////////////////////////////////////