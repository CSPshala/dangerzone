///////////////////////////////////////////////////////////////////////////
//	File Name	:	"Model.cpp"
//	
//	Author Name	:	JC Ricks copy-pasta from http://www.rastertek.com/dx11tut04.html
//	
//	Purpose		:	Hold model / mesh data
///////////////////////////////////////////////////////////////////////////

////////////////////////////////////////
//				INCLUDES
////////////////////////////////////////
#include "Model.h"

////////////////////////////////////////
//				MISC
////////////////////////////////////////

///////////////////////////////////////////////
//  CONSTRUCTOR / DECONSTRUCT / OP OVERLOADS
///////////////////////////////////////////////
Model::Model()
{	
}

Model::Model(const Model& in)
{
}

Model::~Model()
{
}

////////////////////////////////////////
//		PUBLIC UTILITY FUNCTIONS
////////////////////////////////////////
bool Model::Initialize()
{
	bool result;


	// Initialize the vertex and index buffer that hold the geometry for the triangle.
	result = m_RenderContext.Initialize();
	if(!result)
	{
		return false;
	}

	return true;
}

void Model::Shutdown()
{
	// Release the vertex and index buffers.
	m_RenderContext.Shutdown();

	return;
}

void Model::Render()
{
	// Put the vertex and index buffers on the graphics pipeline to prepare them for drawing.
	m_RenderContext.RenderBuffers();

	return;
}

////////////////////////////////////////
//		PRIVATE UTILITY FUNCTIONS
////////////////////////////////////////


////////////////////////////////////////
//	    PUBLIC ACCESSORS / MUTATORS
////////////////////////////////////////


////////////////////////////////////////
//	    PRIVATE ACCESSORS / MUTATORS
////////////////////////////////////////